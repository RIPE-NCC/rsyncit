image: gradle:8.0-jdk11

# Explicit version of the Mergerequests-Pipelines workflow, with the main branch
# added.
workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == "main"

stages:
  - build
  - test
  - qa
  - package
  - review
  - deploy
  - publish

include:
  # Use gitlab security scanning iff it is available
  - template: Dependency-Scanning.gitlab-ci.yml
  # Mend (dependency scanning)
  - project: 'swe/gitlab-ci'
    file: '/templates/mend-scanning.yml'
  - project: 'swe/gitlab-ci'
    file: '/templates/mend-generate-badge.yml'
  # Review Apps
  - project: 'rpki/helm-charts'
    file: '/gitlab/review.yml'


variables:
  BUILD_NUMBER: ${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}
  GRADLE_USER_HOME: "${CI_PROJECT_DIR}/.gradle/"
  GRADLE_OPTS: "-Dorg.gradle.caching=true -Dorg.gradle.parallel=true -Dorg.gradle.daemon=false"
  HSM_IMPL: thales

# Cache per repository (not shared between forks?).
cache: &global_cache
  key: one-key-for-all
  # In general, only pull the cache. pull-push in the stage that gathers all
  # artifacts.
  policy: pull
  paths:
    - "${CI_PROJECT_DIR}/.gradle/caches"
    - "${CI_PROJECT_DIR}/.gradle/wrappers"

######## Build stage ########
build:
  stage: build
  cache:
    <<: *global_cache
    policy: pull-push
  # Diagram of gradle tasks and their dependencies: https://docs.gradle.org/current/userguide/img/javaPluginTasks.png
  script:
    # build all classes, do not run tests or create jar.
    - gradle clean testClasses
  # Cache the build artifacts in specific paths
  artifacts:
    paths:
      - "build"
    expire_in: 4 weeks

test:
  stage: test
  dependencies:
    - build
  script:
    - gradle check
    - cat build/reports/jacoco/test/html/index.html
  artifacts:
    when: on_failure
    paths:
      - build/reports/
    expire_in: 4 days
    reports:
      junit:
        - build/test-results/test/*.xml

build-image:
  stage: package
  needs: ["build"]
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .gradle/caches
      - .gradle/wrapper
  before_script:
    - apt-get update
    - apt-get install --yes --no-install-recommends docker.io
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - mkdir -p ~/.config/google-cloud-tools-java/jib/
    - cp jib.config.json ~/.config/google-cloud-tools-java/jib/config.json
  script:
    - ./gradlew jib --image $CI_REGISTRY_IMAGE/ci:ci-step-$BUILD_NUMBER
  rules:
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      when: never
    - when: on_success

image-tag-latest:
  stage: deploy
  dependencies:
    - build-image
  image: docker-registry.ripe.net/swe/gitlab-ci/debian-deployenv
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/ci:ci-step-$BUILD_NUMBER
    - docker tag $CI_REGISTRY_IMAGE/ci:ci-step-$BUILD_NUMBER ${CI_REGISTRY_IMAGE}:latest
    - docker push ${CI_REGISTRY_IMAGE}:latest
  rules:
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      when: never
    - if: $CI_COMMIT_BRANCH == "main"
    - when: manual


######### Test stage #########
sonarqube:
  stage: qa
  needs: ["build"]
  dependencies: ["build"]
  variables:
    GIT_DEPTH: 0
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .gradle/caches
      - .gradle/wrapper
  script:
    - ./gradlew -i -Dsonar.projectKey=rsyncit sonarqube
  allow_failure: true
  rules:
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      when: never
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate/'
      when: never
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "next"

review:
  variables:
    GIT_STRATEGY: none
    RPKI_CORE_IMAGE: $CI_REGISTRY_IMAGE/ci:ci-step-$BUILD_NUMBER
  needs:
    - build-image
